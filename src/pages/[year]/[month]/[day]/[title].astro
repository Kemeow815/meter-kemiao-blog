---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '@src/layouts/BaseLayout.astro';
import Prose from '@src/components/Prose.astro';
import { Image } from 'astro:assets';
import FormattedDate from '@src/components/FormattedDate.astro';
import AboutTheAuthor from '@src/components/widgets/AboutTheAuthor.astro';
import TableOfContent from '@src/components/widgets/TableOfContent.astro';
import { getFluidPostPath } from '@src/utils/blog';
import { loadEnv } from 'vite';

const { GISCUS_REPO, GISCUS_REPO_ID, GISCUS_CATEGORY, GISCUS_CATEGORY_ID } = loadEnv(
	process.env.NODE_ENV || 'production',
	process.cwd(),
	''
);

export async function getStaticPaths() {
	const posts = await getCollection('posts');

	return posts.map((post) => {
		const params = getFluidPostPath(post);

		// 调试信息
		// console.log({
		//   // originalTitle: post.data.title,
		//   // processedTitle: params.title,
		//   // generatedPath: `/${params.year}/${params.month}/${params.day}/${params.title}`,
		//   // params
		// });

		return {
			params,
			props: post
		};
	});
}

type Props = CollectionEntry<'posts'>;
const post = Astro.props;
const {
	data: { title, date, description, banner_img, tags, updatedDate }
} = post;
const { Content, headings } = await post.render();
---

<BaseLayout title={title} description={description}>
	<div class='container lg:flex gap-10'>
		<main class='overflow-hidden grow'>
			<article>
				<Prose>
					<div>
						<h1 class='!my-1 leading-tight'>{title}</h1>
						<div
							class='text-sm font-[500] mt-2 sm:mt-0 py-1 md:text-right flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center'
						>
							{
								(
									<div class='flex gap-2'>
										{(tags || [])?.map((tag: string) => (
											<p
												class='border border-zinc-300 dark:border-zinc-700 rounded-2xl
                          text-sm text-zinc-700 dark:text-zinc-300 no-underline px-2 py-0.5
                          transition-all duration-700
                        hover:border-zinc-700 dark:hover:border-zinc-300'>
												{tag}
											</p>
										))}
									</div>
								)
							}
							<div>
								{
									updatedDate ? (
										<>
											更新与{' '}
											<strong>
												<FormattedDate date={updatedDate} />
											</strong>
										</>
									) : (
										<>
											发布于{' '}
											<strong>
												<FormattedDate date={date} />
											</strong>
										</>
									)
								}
							</div>
						</div>
					</div>
					<!-- <div class='py-3 overflow-hidden'>
            {banner_img && <Image class='rounded-3xl w-full m-0 lg:mb-2' src={banner_img} alt={title} loading='eager' />}
          </div> -->
					<Content />
				</Prose>
				{
					GISCUS_REPO && (
						<script
							id='giscus-script'
							is:inline
							src='https://giscus.app/client.js'
							data-repo={GISCUS_REPO}
							data-repo-id={GISCUS_REPO_ID}
							data-category={GISCUS_CATEGORY}
							data-category-id={GISCUS_CATEGORY_ID}
							data-mapping='pathname'
							data-strict='0'
							data-reactions-enabled='1'
							data-emit-metadata='0'
							data-input-position='bottom'
							data-theme='preferred_color_scheme'
							data-lang='zh-CN'
							crossorigin='anonymous'
							async
						/>
					)
				}
			</article>
		</main>
		<div class='shrink-0 w-[280px] hidden md:block'>
			<div class='mb-4'>
				<AboutTheAuthor />
			</div>
			<TableOfContent headings={headings} />
		</div>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;

			// highlight the last scrolled-to: set everything inactive first
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			// then iterate backwards, on the first match highlight it and break
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
